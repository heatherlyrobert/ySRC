.TH ySRC 6· 2013-jan "linux" "interactive usage and navigation"

.SH NAME
.B ySRC
- efficient, flexible ascii-text content creation

.SH PATRON
.B angelia-minyma (message)
embodiment of the gods communications

.SH IMAGERY
beautiful young woman with graceful wings and feathers in her hair

.SH SUMMARY
ySRC is a custom c library providing universal vi/vim-ish ascii-text content
creation and editing -- including navigation, selection, copy registers,
undo/redo, display, and status to custom programs.

.SH SERIOUS DISCLAIMER
i'm a crazy, naive, dog-fooding c programmer.  i'm NOT trying to be best.
i optimize for learning, transparency, and ease of maintenance.  if i wanted
awesome, fast, and cutting-edge, i'd use yours ;)

.SH DOCUMENTATION FILES (see also)
.nf  
ySRC (3)           interfacing applications with library
.B ySRC (6)···········interactive usage and navigation
ySRC (7)           decision rationale, scope, and objectives
ySRC (9)           user interface behavior guarantees

.SH FILE PURPOSE
provide details on interactive system use, mainly related to mode changes
and navigation.  ySRC·(6) expands on thie section for mode changes and
non-navigation cursor positioning.

.SH TABLE OF CONTENTS
.nf  
a) source          main source mode
b) replace         replace micro-mode
c) input           insert/append micro-mode
d) select          content selection pseudo-mode
e) registers       source register sub-mode
f) wander          wander editing micro-mode
g) sundo           source undo/redo pseudo-mode





.SH B) REPLACE micro-mode
.SS ---basics---------------------------------------------------------
 Rtext¥  replace four characters with "text" then exit
.SS ---overview-------------------------------------------------------
.B definition.
very rapid, direct type-over of existing characters.

.B situation.
does not exist in almost any applications.  modern software usually requires
deleting current text and then inserting new.

.B value.
quite a common efficiency gain, quite frequently useful in automation, and,
even more valuable editing spacially organized data.

.B answer.
provide easy access to rapid single-character and longer multi-character
replacement capabilities.

.SS ---full capabilities----------------------------------------------

.B invoking replace micro-mode
   -- can only be invoked from source mode, nowhere else
   r          replace at current position (exits automatically)
   R          replace a string of characters until exiting

.B single-character mode (r)
   r¢         replaces the current character with the new one
   ¤          current character will temporaryly show as placeholder

.B multi-character mode (R)
   R´´´¥      types-over until and ¥ or ¦
   ¥          save changes and return to source mode
   ¦          accept changes and exit source mode also
   ¤          current character will temporaryly show as placeholder

.B escaped characters
   µ¢         allows entry of special characters
   µ_¢        allows entry of extended special characters

.B extra movement
   ¿  <BS>    moves left without making any changes
   ¾  <DEL>   moves right without making any changes

.B special notes
   -- can type past the end, which will add length

.B sundo (undo/redo)
   -- groups all changes during a single replace session
   -- undo/redo available once back in source mode



.SH E) REGISTERS sub-mode (text)
.SS ---overview-------------------------------------------------------
.B definition.
temporary text storage to aid content manipulation.

.B situation.
nearly all applications provide a single rudimentary cut/paste area, but
almost no additional or advanced capabilities.

.B value.
serious content creation requires diverse tools to make editors brave enough
to make changes, otherwise content goes untended.

.B automation.
without serious register capabilities, content modification automation is
quite rudimentary, if not virtually impossible.

.B answer.
provide 61 flexible registers [¶a-z0-9è-ÿ] with copy, cut, clear, append,
paste, replace, and substitute capabilities.

.SS ---full capabilities----------------------------------------------

.B invoking replace micro-mode
   -- can only be invoked from source mode, nowhere else
   r          replace at current position (exits automatically)
   R          replace a string of characters until exiting

.B actions from unnamed, default register
   y          copy the current selection into register ¶
   p          paste register ¶ content after current position
   P          paste register ¶ content before current position

.B selecting a register
   ¶¢         selects register ¢ for the next action
   a-z        registers are for general users and automation
   0-9        registers are typically system related
   è-ÿ        registers are reserved for macros (to avoid collisions)
   ¶¶         reuse the last register requested (except ¶)

.B actions going from text to a register
   ¶ay        copy current selection into register 'a'
   ¶Ay        append current selection onto end of register 'a'
   ¶ad        copy selection to register 'a' and delete from text
   ¶ax        copy selection to register 'a' and replace with blanks
   ¶a#        wipes content of register 'a'

.B actions bringing register content back into text
   ¶ai        insert register 'a' content before current position
   ¶aa        append register 'a' content after current position
   ¶ar        replace selection with register 'a' contents
   ¶as        delete selection and replace with register 'a' contents

.B actions between registers
   ¶a>b       copy register text to a second register
   ¶a]b       move register text to a second register (clearing first)
   ¶a)b       swap the contents of two registers

.B actions to import and export content
   ¶a-        export register contents to clipboard (1 line)
   ¶a+        import register contents from clipboard (1 line)

.B special notes
   -- if replace text is smaller than selection, uses '²' to fill
   -- if replace text is larger than selection, content is truncated
   -- no register actions accept repitition counts (repeats)

.B debugging help
   ¶_         show last-used named register in the status line
   ¶?         show inventory of registers in info window

